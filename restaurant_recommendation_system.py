# -*- coding: utf-8 -*-
"""restaurant recommendation system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/123K24sHWjdynMcDS1C6jVoE16hgWEe3I
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import jaccard_score
from scipy.spatial.distance import pdist, squareform
pd.reset_option('display.max_rows')

import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv("/content/Dataset .csv")
df.head()

df.columns

dfRS = df[['Restaurant ID','Restaurant Name','Cuisines','Aggregate rating','Votes']]
dfRS

def dataDesc():
    listItem = []
    for col in dfRS.columns :
        listItem.append(
            [col,
            dfRS[col].dtype,
            dfRS[col].isna().sum(),
            round(dfRS[col].isna().sum()/len(dfRS)*100,2),
            dfRS[col].nunique(),
            list(dfRS[col].drop_duplicates().sample(2).values)]
        )
    descData = pd.DataFrame(data = listItem,
                            columns = ['Column','Data Type', 'Missing Value',
                                        'Pct Missing Value', 'Num Unique', 'Unique Sample'])
    return descData

dataDesc()

dfRS = dfRS.dropna()

dfRS

dfRS = dfRS.rename(columns={'Restaurant ID': 'restaurant_id'})
dfRS = dfRS.rename(columns={'Restaurant Name': 'restaurant_name'})
dfRS = dfRS.rename(columns={'Cuisines': 'cuisines'})
dfRS = dfRS.rename(columns={'Aggregate rating': 'aggregate_rating'})
dfRS = dfRS.rename(columns={'Votes': 'votes'})

dfRS

dfRS.duplicated().sum()

dfRS['restaurant_name'].duplicated().sum()

dfRS['restaurant_name'].value_counts()

dfRS = dfRS.sort_values(by=['restaurant_name','aggregate_rating'],ascending=False)

dfRS[dfRS['restaurant_name']=="Domino's Pizza"].head()

dfRS = dfRS.drop_duplicates('restaurant_name',keep='first')
dfRS

dfRS['restaurant_name'].value_counts()

dfRS = dfRS[dfRS['aggregate_rating']>=4.0]
dfRS

dfRS['cuisines'] = dfRS['cuisines'].str.split(', ')
dfRS

dfRS = dfRS.explode('cuisines')
dfRS

dfRS['cuisines'].value_counts()

xTabRestoCuisines = pd.crosstab(dfRS['restaurant_name'],
                                dfRS['cuisines'])

xTabRestoCuisines

xTabRestoCuisines.loc['feel ALIVE'].values

dfRS['restaurant_name'].sample(20, random_state=101)

print(jaccard_score(xTabRestoCuisines.loc["Olive Bistro"].values,
                    xTabRestoCuisines.loc["Rose Cafe"].values))

jaccardDist = pdist(xTabRestoCuisines.values, metric='jaccard')
jaccardMatrix = squareform(jaccardDist)
jaccardSim = 1 - jaccardMatrix
dfJaccard = pd.DataFrame(
    jaccardSim,
    index=xTabRestoCuisines.index,
    columns=xTabRestoCuisines.index)

dfJaccard

dfRS['restaurant_name'].sample(20)

resto = 'Ooma'

sim = dfJaccard.loc[resto].sort_values(ascending=False)

sim = pd.DataFrame({'restaurant_name': sim.index, 'simScore': sim.values})
sim = sim[(sim['restaurant_name']!= resto) & (sim['simScore']>=0.7)].head(5)


RestoRec = pd.merge(sim,dfRS[['restaurant_name','aggregate_rating']],how='inner',on='restaurant_name')
FinalRestoRec = RestoRec.sort_values('aggregate_rating',ascending=False).drop_duplicates('restaurant_name',keep='first')

FinalRestoRec

